package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.21 DO NOT EDIT.

import (
	"context"
	"fmt"
	"toiler-graphql/auth"
	"toiler-graphql/database"
)

// Assignees is the resolver for the assignees field.
func (r *ganttActivityResolver) Assignees(ctx context.Context, obj *database.GanttActivity) ([]database.GanttAssigned, error) {
	return r.Repository.GetActivityAssignees(ctx, obj.ID)
}

// State is the resolver for the state field.
func (r *ganttActivityResolver) State(ctx context.Context, obj *database.GanttActivity) (*database.GanttState, error) {
	state, err := r.Repository.GetState(ctx, obj.StateID.Int64)
	return &state, err
}

// Task is the resolver for the task field.
func (r *ganttActivityResolver) Task(ctx context.Context, obj *database.GanttActivity) (*database.GanttTask, error) {
	task, err := r.Repository.GetTask(ctx, obj.TaskID)
	return &task, err
}

// User is the resolver for the user field.
func (r *ganttAssignedResolver) User(ctx context.Context, obj *database.GanttAssigned) (*database.UserUser, error) {
	user, err := r.Repository.GetUser(ctx, obj.UserID)
	return &user, err
}

// Activity is the resolver for the activity field.
func (r *ganttAssignedResolver) Activity(ctx context.Context, obj *database.GanttAssigned) (*database.GanttActivity, error) {
	activity, err := r.Repository.GetActivity(ctx, obj.ActivityID)
	return &activity, err
}

// Author is the resolver for the author field.
func (r *ganttCommentResolver) Author(ctx context.Context, obj *database.GanttComment) (*database.UserUser, error) {
	user, err := r.Repository.GetUser(ctx, obj.AuthorID)
	return &user, err
}

// ProjectManager is the resolver for the projectManager field.
func (r *ganttProjectResolver) ProjectManager(ctx context.Context, obj *database.GanttProject) (*database.UserUser, error) {
	user, err := r.Repository.GetUser(ctx, obj.ProjectManagerID)
	return &user, err
}

// Tasks is the resolver for the tasks field.
func (r *ganttProjectResolver) Tasks(ctx context.Context, obj *database.GanttProject) ([]database.GanttTask, error) {
	return r.Repository.GetProjectTasks(ctx, obj.ID)
}

// Roles is the resolver for the roles field.
func (r *ganttProjectResolver) Roles(ctx context.Context, obj *database.GanttProject) ([]database.GanttRole, error) {
	return r.Repository.GetProjectRoles(ctx, obj.ID)
}

// Teams is the resolver for the teams field.
func (r *ganttProjectResolver) Teams(ctx context.Context, obj *database.GanttProject) ([]database.GanttTeam, error) {
	return r.Repository.GetProjectTeams(ctx, obj.ID)
}

// States is the resolver for the states field.
func (r *ganttProjectResolver) States(ctx context.Context, obj *database.GanttProject) ([]database.GanttState, error) {
	return r.Repository.GetProjectStates(ctx, obj.ID)
}

// Project is the resolver for the project field.
func (r *ganttTaskResolver) Project(ctx context.Context, obj *database.GanttTask) (*database.GanttProject, error) {
	project, err := r.Repository.GetProject(ctx, obj.ProjectID)
	if err != nil {
		return nil, err
	}

	return &project, err
}

// Activities is the resolver for the activities field.
func (r *ganttTaskResolver) Activities(ctx context.Context, obj *database.GanttTask) ([]database.GanttActivity, error) {
	return r.Repository.GetTaskActivities(ctx, obj.ID)
}

// Project is the resolver for the project field.
func (r *ganttTeamResolver) Project(ctx context.Context, obj *database.GanttTeam) (*database.GanttProject, error) {
	project, err := r.Repository.GetProject(ctx, obj.ProjectID)
	if err != nil {
		return nil, err
	}

	return &project, err
}

// Role is the resolver for the role field.
func (r *ganttTeammemberResolver) Role(ctx context.Context, obj *database.GanttTeammember) (*database.GanttRole, error) {
	role, err := r.Repository.GetRole(ctx, obj.RoleID)
	return &role, err
}

// Team is the resolver for the team field.
func (r *ganttTeammemberResolver) Team(ctx context.Context, obj *database.GanttTeammember) (*database.GanttTeam, error) {
	team, err := r.Repository.GetTeam(ctx, obj.TeamID)
	return &team, err
}

// User is the resolver for the user field.
func (r *ganttTeammemberResolver) User(ctx context.Context, obj *database.GanttTeammember) (*database.UserUser, error) {
	user, err := r.Repository.GetUser(ctx, obj.UserID)
	return &user, err
}

// Activity is the resolver for the Activity field.
func (r *queryResolver) Activity(ctx context.Context, id int) (*database.GanttActivity, error) {
	activity, err := r.Repository.GetActivity(ctx, int64(id))
	if err != nil {
		return nil, err
	}

	return &activity, err
}

// Assigned is the resolver for the assigned field.
func (r *queryResolver) Assigned(ctx context.Context, id int) (*database.GanttAssigned, error) {
	assigned, err := r.Repository.GetAssigned(ctx, int64(id))
	if err != nil {
		return nil, err
	}

	return &assigned, err
}

// ProjectActivities is the resolver for the projectActivities field.
func (r *queryResolver) ProjectActivities(ctx context.Context, projPk int) ([]database.GanttActivity, error) {
	return r.Repository.GetProjectActivities(ctx, int64(projPk))
}

// ProjectAssigned is the resolver for the projectAssigned field.
func (r *queryResolver) ProjectAssigned(ctx context.Context, projPk int) ([]database.GanttAssigned, error) {
	return r.Repository.GetProjectAssignees(ctx, int64(projPk))
}

// AssignedToMe is the resolver for the assignedToMe field.
func (r *queryResolver) AssignedToMe(ctx context.Context) ([]database.GanttAssigned, error) {
	userId, err := auth.GetUserId(ctx)
	if err != nil {
		return nil, err
	}

	return r.Repository.GetAssignedToUser(ctx, userId)
}

// ActivityComments is the resolver for the activityComments field.
func (r *queryResolver) ActivityComments(ctx context.Context, activityPk int) ([]database.GanttComment, error) {
	return r.Repository.GetActivityComments(ctx, int64(activityPk))
}

// ProjectEmployees is the resolver for the projectEmployees field.
func (r *queryResolver) ProjectEmployees(ctx context.Context, projPk int) ([]database.UserUser, error) {
	return r.Repository.GetProjectEmployees(ctx, int64(projPk))
}

// Projects is the resolver for the projects field.
func (r *queryResolver) Projects(ctx context.Context) ([]database.GanttProject, error) {
	userId, err := auth.GetUserId(ctx)
	if err != nil {
		return nil, err
	}
	return r.Repository.ListProjects(ctx, database.ListProjectsParams{UserID: userId, ProjectManagerID: userId})
}

// ProjectRoles is the resolver for the projectRoles field.
func (r *queryResolver) ProjectRoles(ctx context.Context, project int) ([]database.GanttRole, error) {
	return r.Repository.GetProjectRoles(ctx, int64(project))
}

// ProjectStates is the resolver for the projectStates field.
func (r *queryResolver) ProjectStates(ctx context.Context, projPk int) ([]database.GanttState, error) {
	return r.Repository.GetProjectStates(ctx, int64(projPk))
}

// ProjectTasks is the resolver for the projectTasks field.
func (r *queryResolver) ProjectTasks(ctx context.Context, projPk int) ([]database.GanttTask, error) {
	return r.Repository.GetProjectTasks(ctx, int64(projPk))
}

// ProjectTeams is the resolver for the projectTeams field.
func (r *queryResolver) ProjectTeams(ctx context.Context, project int) ([]database.GanttTeam, error) {
	return r.Repository.GetProjectTeams(ctx, int64(project))
}

// ProjectTeamMembers is the resolver for the projectTeamMembers field.
func (r *queryResolver) ProjectTeamMembers(ctx context.Context, project int) ([]database.GanttTeammember, error) {
	return r.Repository.GetProjectTeammembers(ctx, int64(project))
}

// Project is the resolver for the project field.
func (r *queryResolver) Project(ctx context.Context, id int) (*database.GanttProject, error) {
	project, err := r.Repository.GetProject(ctx, int64(id))
	if err != nil {
		return nil, err
	}

	return &project, err
}

// Role is the resolver for the role field.
func (r *queryResolver) Role(ctx context.Context, id int) (*database.GanttRole, error) {
	role, err := r.Repository.GetRole(ctx, int64(id))
	if err != nil {
		return nil, err
	}

	return &role, err
}

// State is the resolver for the state field.
func (r *queryResolver) State(ctx context.Context, id int) (*database.GanttState, error) {
	state, err := r.Repository.GetState(ctx, int64(id))
	if err != nil {
		return nil, err
	}

	return &state, err
}

// Task is the resolver for the task field.
func (r *queryResolver) Task(ctx context.Context, id int) (*database.GanttTask, error) {
	task, err := r.Repository.GetTask(ctx, int64(id))
	if err != nil {
		return nil, err
	}

	return &task, err
}

// Team is the resolver for the team field.
func (r *queryResolver) Team(ctx context.Context, id int) (*database.GanttTeam, error) {
	team, err := r.Repository.GetTeam(ctx, int64(id))
	if err != nil {
		return nil, err
	}

	return &team, err
}

// Me is the resolver for the me field.
func (r *queryResolver) Me(ctx context.Context) (*database.UserUser, error) {
	userId, err := auth.GetUserId(ctx)
	if err != nil {
		return nil, err
	}

	user, err := r.Repository.GetUser(ctx, userId)
	return &user, err
}

// UserSearchUsers is the resolver for the userSearchUsers field.
func (r *queryResolver) UserSearchUsers(ctx context.Context, search *string) ([]database.UserUser, error) {
	panic(fmt.Errorf("not implemented: UserSearchUsers - userSearchUsers"))
}

// GanttActivity returns GanttActivityResolver implementation.
func (r *Resolver) GanttActivity() GanttActivityResolver { return &ganttActivityResolver{r} }

// GanttAssigned returns GanttAssignedResolver implementation.
func (r *Resolver) GanttAssigned() GanttAssignedResolver { return &ganttAssignedResolver{r} }

// GanttComment returns GanttCommentResolver implementation.
func (r *Resolver) GanttComment() GanttCommentResolver { return &ganttCommentResolver{r} }

// GanttProject returns GanttProjectResolver implementation.
func (r *Resolver) GanttProject() GanttProjectResolver { return &ganttProjectResolver{r} }

// GanttTask returns GanttTaskResolver implementation.
func (r *Resolver) GanttTask() GanttTaskResolver { return &ganttTaskResolver{r} }

// GanttTeam returns GanttTeamResolver implementation.
func (r *Resolver) GanttTeam() GanttTeamResolver { return &ganttTeamResolver{r} }

// GanttTeammember returns GanttTeammemberResolver implementation.
func (r *Resolver) GanttTeammember() GanttTeammemberResolver { return &ganttTeammemberResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type ganttActivityResolver struct{ *Resolver }
type ganttAssignedResolver struct{ *Resolver }
type ganttCommentResolver struct{ *Resolver }
type ganttProjectResolver struct{ *Resolver }
type ganttTaskResolver struct{ *Resolver }
type ganttTeamResolver struct{ *Resolver }
type ganttTeammemberResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
