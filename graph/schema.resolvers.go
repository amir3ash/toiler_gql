package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.21 DO NOT EDIT.

import (
	"context"
	"fmt"
	"toiler-graphql/database"
	"toiler-graphql/graph/model"
)

// Assignees is the resolver for the assignees field.
func (r *ganttActivityResolver) Assignees(ctx context.Context, obj *database.GanttActivity) ([]database.GanttAssigned, error) {
	panic(fmt.Errorf("not implemented: Assignees - assignees"))
}

// Dependency is the resolver for the dependency field.
func (r *ganttActivityResolver) Dependency(ctx context.Context, obj *database.GanttActivity) (*int, error) {
	panic(fmt.Errorf("not implemented: Dependency - dependency"))
}

// GanttstateID is the resolver for the Ganttstate_id field.
func (r *ganttActivityResolver) GanttstateID(ctx context.Context, obj *database.GanttActivity) (*int, error) {
	panic(fmt.Errorf("not implemented: GanttstateID - Ganttstate_id"))
}

// Ganttstate is the resolver for the Ganttstate field.
func (r *ganttActivityResolver) Ganttstate(ctx context.Context, obj *database.GanttActivity) (*database.GanttState, error) {
	panic(fmt.Errorf("not implemented: Ganttstate - Ganttstate"))
}

// GantttaskID is the resolver for the Gantttask_id field.
func (r *ganttActivityResolver) GantttaskID(ctx context.Context, obj *database.GanttActivity) (int, error) {
	panic(fmt.Errorf("not implemented: GantttaskID - Gantttask_id"))
}

// Gantttask is the resolver for the Gantttask field.
func (r *ganttActivityResolver) Gantttask(ctx context.Context, obj *database.GanttActivity) (*database.GanttTask, error) {
	panic(fmt.Errorf("not implemented: Gantttask - Gantttask"))
}

// Ganttactivity is the resolver for the Ganttactivity field.
func (r *ganttAssignedResolver) Ganttactivity(ctx context.Context, obj *database.GanttAssigned) (int, error) {
	panic(fmt.Errorf("not implemented: Ganttactivity - Ganttactivity"))
}

// User is the resolver for the user field.
func (r *ganttAssignedResolver) User(ctx context.Context, obj *database.GanttAssigned) (*model.User, error) {
	panic(fmt.Errorf("not implemented: User - user"))
}

// Ganttactivity is the resolver for the Ganttactivity field.
func (r *ganttCommentResolver) Ganttactivity(ctx context.Context, obj *database.GanttComment) (*int, error) {
	panic(fmt.Errorf("not implemented: Ganttactivity - Ganttactivity"))
}

// Author is the resolver for the author field.
func (r *ganttCommentResolver) Author(ctx context.Context, obj *database.GanttComment) (*model.User, error) {
	panic(fmt.Errorf("not implemented: Author - author"))
}

// GanttprojectManagerID is the resolver for the GanttprojectManager_id field.
func (r *ganttProjectResolver) GanttprojectManagerID(ctx context.Context, obj *database.GanttProject) (*int, error) {
	panic(fmt.Errorf("not implemented: GanttprojectManagerID - GanttprojectManager_id"))
}

// GanttprojectManager is the resolver for the GanttprojectManager field.
func (r *ganttProjectResolver) GanttprojectManager(ctx context.Context, obj *database.GanttProject) (*model.User, error) {
	panic(fmt.Errorf("not implemented: GanttprojectManager - GanttprojectManager"))
}

// Gantttasks is the resolver for the Gantttasks field.
func (r *ganttProjectResolver) Gantttasks(ctx context.Context, obj *database.GanttProject) ([]database.GanttTask, error) {
	panic(fmt.Errorf("not implemented: Gantttasks - Gantttasks"))
}

// Ganttroles is the resolver for the Ganttroles field.
func (r *ganttProjectResolver) Ganttroles(ctx context.Context, obj *database.GanttProject) ([]database.GanttRole, error) {
	panic(fmt.Errorf("not implemented: Ganttroles - Ganttroles"))
}

// Ganttteams is the resolver for the Ganttteams field.
func (r *ganttProjectResolver) Ganttteams(ctx context.Context, obj *database.GanttProject) ([]database.GanttTeam, error) {
	panic(fmt.Errorf("not implemented: Ganttteams - Ganttteams"))
}

// Ganttstates is the resolver for the Ganttstates field.
func (r *ganttProjectResolver) Ganttstates(ctx context.Context, obj *database.GanttProject) ([]database.GanttState, error) {
	panic(fmt.Errorf("not implemented: Ganttstates - Ganttstates"))
}

// GanttprojectID is the resolver for the Ganttproject_id field.
func (r *ganttRoleResolver) GanttprojectID(ctx context.Context, obj *database.GanttRole) (int, error) {
	panic(fmt.Errorf("not implemented: GanttprojectID - Ganttproject_id"))
}

// GanttprojectID is the resolver for the Ganttproject_id field.
func (r *ganttStateResolver) GanttprojectID(ctx context.Context, obj *database.GanttState) (int, error) {
	panic(fmt.Errorf("not implemented: GanttprojectID - Ganttproject_id"))
}

// GanttprojectID is the resolver for the Ganttproject_id field.
func (r *ganttTaskResolver) GanttprojectID(ctx context.Context, obj *database.GanttTask) (int, error) {
	panic(fmt.Errorf("not implemented: GanttprojectID - Ganttproject_id"))
}

// Ganttproject is the resolver for the Ganttproject field.
func (r *ganttTaskResolver) Ganttproject(ctx context.Context, obj *database.GanttTask) (*database.GanttProject, error) {
	panic(fmt.Errorf("not implemented: Ganttproject - Ganttproject"))
}

// Activities is the resolver for the activities field.
func (r *ganttTaskResolver) Activities(ctx context.Context, obj *database.GanttTask) ([]database.GanttActivity, error) {
	panic(fmt.Errorf("not implemented: Activities - activities"))
}

// GanttprojectID is the resolver for the Ganttproject_id field.
func (r *ganttTeamResolver) GanttprojectID(ctx context.Context, obj *database.GanttTeam) (int, error) {
	panic(fmt.Errorf("not implemented: GanttprojectID - Ganttproject_id"))
}

// Ganttproject is the resolver for the Ganttproject field.
func (r *ganttTeamResolver) Ganttproject(ctx context.Context, obj *database.GanttTeam) (*database.GanttProject, error) {
	panic(fmt.Errorf("not implemented: Ganttproject - Ganttproject"))
}

// Activity is the resolver for the Activity field.
func (r *queryResolver) Activity(ctx context.Context, id int) (*database.GanttActivity, error) {
	panic(fmt.Errorf("not implemented: Activity - Activity"))
}

// Ganttassigned is the resolver for the Ganttassigned field.
func (r *queryResolver) Ganttassigned(ctx context.Context, id int) (*database.GanttAssigned, error) {
	panic(fmt.Errorf("not implemented: Ganttassigned - Ganttassigned"))
}

// GanttActivity is the resolver for the GanttActivity field.
func (r *queryResolver) GanttActivity(ctx context.Context, projPk int) ([]database.GanttActivity, error) {
	panic(fmt.Errorf("not implemented: GanttActivity - GanttActivity"))
}

// GanttGanttAssigned is the resolver for the ganttGanttAssigned field.
func (r *queryResolver) GanttGanttAssigned(ctx context.Context, projPk int) ([]database.GanttAssigned, error) {
	panic(fmt.Errorf("not implemented: GanttGanttAssigned - ganttGanttAssigned"))
}

// GanttGanttAssignedToMe is the resolver for the ganttGanttAssignedToMe field.
func (r *queryResolver) GanttGanttAssignedToMe(ctx context.Context) ([]model.GanttAssignedToMe, error) {
	panic(fmt.Errorf("not implemented: GanttGanttAssignedToMe - ganttGanttAssignedToMe"))
}

// GanttGanttComment is the resolver for the ganttGanttComment field.
func (r *queryResolver) GanttGanttComment(ctx context.Context, ganttactivityPk int) ([]database.GanttComment, error) {
	panic(fmt.Errorf("not implemented: GanttGanttComment - ganttGanttComment"))
}

// GanttEmployee is the resolver for the ganttEmployee field.
func (r *queryResolver) GanttEmployee(ctx context.Context, projPk int) ([]model.User, error) {
	panic(fmt.Errorf("not implemented: GanttEmployee - ganttEmployee"))
}

// GanttGanttProject is the resolver for the ganttGanttProject field.
func (r *queryResolver) GanttGanttProject(ctx context.Context) ([]database.GanttProject, error) {
	panic(fmt.Errorf("not implemented: GanttGanttProject - ganttGanttProject"))
}

// GanttGanttRole is the resolver for the ganttGanttRole field.
func (r *queryResolver) GanttGanttRole(ctx context.Context, ganttproject *int) ([]database.GanttRole, error) {
	panic(fmt.Errorf("not implemented: GanttGanttRole - ganttGanttRole"))
}

// GanttGanttState is the resolver for the ganttGanttState field.
func (r *queryResolver) GanttGanttState(ctx context.Context, projPk int) ([]database.GanttState, error) {
	panic(fmt.Errorf("not implemented: GanttGanttState - ganttGanttState"))
}

// GanttGanttTask is the resolver for the ganttGanttTask field.
func (r *queryResolver) GanttGanttTask(ctx context.Context, projPk int) ([]database.GanttTask, error) {
	panic(fmt.Errorf("not implemented: GanttGanttTask - ganttGanttTask"))
}

// GanttGanttTeam is the resolver for the ganttGanttTeam field.
func (r *queryResolver) GanttGanttTeam(ctx context.Context, ganttproject int) ([]database.GanttTeam, error) {
	panic(fmt.Errorf("not implemented: GanttGanttTeam - ganttGanttTeam"))
}

// GanttGanttTeamMember is the resolver for the ganttGanttTeamMember field.
func (r *queryResolver) GanttGanttTeamMember(ctx context.Context) ([]model.GanttTeamMember, error) {
	panic(fmt.Errorf("not implemented: GanttGanttTeamMember - ganttGanttTeamMember"))
}

// Ganttproject is the resolver for the Ganttproject field.
func (r *queryResolver) Ganttproject(ctx context.Context, id int) (*database.GanttProject, error) {
	panic(fmt.Errorf("not implemented: Ganttproject - Ganttproject"))
}

// Ganttrole is the resolver for the Ganttrole field.
func (r *queryResolver) Ganttrole(ctx context.Context, id int) (*database.GanttRole, error) {
	panic(fmt.Errorf("not implemented: Ganttrole - Ganttrole"))
}

// Ganttstate is the resolver for the Ganttstate field.
func (r *queryResolver) Ganttstate(ctx context.Context, id string) (*database.GanttState, error) {
	panic(fmt.Errorf("not implemented: Ganttstate - Ganttstate"))
}

// Gantttask is the resolver for the Gantttask field.
func (r *queryResolver) Gantttask(ctx context.Context, id string) (*database.GanttTask, error) {
	panic(fmt.Errorf("not implemented: Gantttask - Gantttask"))
}

// Ganttteam is the resolver for the Ganttteam field.
func (r *queryResolver) Ganttteam(ctx context.Context, id string) (*database.GanttTeam, error) {
	panic(fmt.Errorf("not implemented: Ganttteam - Ganttteam"))
}

// Me is the resolver for the me field.
func (r *queryResolver) Me(ctx context.Context) (*model.User, error) {
	panic(fmt.Errorf("not implemented: Me - me"))
}

// UserSearchUsers is the resolver for the userSearchUsers field.
func (r *queryResolver) UserSearchUsers(ctx context.Context, search *string) ([]model.User, error) {
	panic(fmt.Errorf("not implemented: UserSearchUsers - userSearchUsers"))
}

// GanttActivity returns GanttActivityResolver implementation.
func (r *Resolver) GanttActivity() GanttActivityResolver { return &ganttActivityResolver{r} }

// GanttAssigned returns GanttAssignedResolver implementation.
func (r *Resolver) GanttAssigned() GanttAssignedResolver { return &ganttAssignedResolver{r} }

// GanttComment returns GanttCommentResolver implementation.
func (r *Resolver) GanttComment() GanttCommentResolver { return &ganttCommentResolver{r} }

// GanttProject returns GanttProjectResolver implementation.
func (r *Resolver) GanttProject() GanttProjectResolver { return &ganttProjectResolver{r} }

// GanttRole returns GanttRoleResolver implementation.
func (r *Resolver) GanttRole() GanttRoleResolver { return &ganttRoleResolver{r} }

// GanttState returns GanttStateResolver implementation.
func (r *Resolver) GanttState() GanttStateResolver { return &ganttStateResolver{r} }

// GanttTask returns GanttTaskResolver implementation.
func (r *Resolver) GanttTask() GanttTaskResolver { return &ganttTaskResolver{r} }

// GanttTeam returns GanttTeamResolver implementation.
func (r *Resolver) GanttTeam() GanttTeamResolver { return &ganttTeamResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type ganttActivityResolver struct{ *Resolver }
type ganttAssignedResolver struct{ *Resolver }
type ganttCommentResolver struct{ *Resolver }
type ganttProjectResolver struct{ *Resolver }
type ganttRoleResolver struct{ *Resolver }
type ganttStateResolver struct{ *Resolver }
type ganttTaskResolver struct{ *Resolver }
type ganttTeamResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
