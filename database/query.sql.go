// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: query.sql

package database

import (
	"context"
)

const getActivity = `-- name: GetActivity :one
SELECT id, name, description, planned_start_date, planned_end_date, planned_budget, actual_start_date, actual_end_date, actual_budget, dependency_id, state_id, task_id FROM ` + "`" + `gantt_activity` + "`" + `
WHERE id = ?
`

func (q *Queries) GetActivity(ctx context.Context, id int64) (GanttActivity, error) {
	row := q.db.QueryRowContext(ctx, getActivity, id)
	var i GanttActivity
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.PlannedStartDate,
		&i.PlannedEndDate,
		&i.PlannedBudget,
		&i.ActualStartDate,
		&i.ActualEndDate,
		&i.ActualBudget,
		&i.DependencyID,
		&i.StateID,
		&i.TaskID,
	)
	return i, err
}

const getActivityComments = `-- name: GetActivityComments :many
SELECT id, created_at, updated_at, text, activity_id, author_id FROM ` + "`" + `gantt_comment` + "`" + `
WHERE activity_id = ?
`

func (q *Queries) GetActivityComments(ctx context.Context, activityID int64) ([]GanttComment, error) {
	rows, err := q.db.QueryContext(ctx, getActivityComments, activityID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GanttComment
	for rows.Next() {
		var i GanttComment
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Text,
			&i.ActivityID,
			&i.AuthorID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAssignedToUser = `-- name: GetAssignedToUser :many
SELECT id, activity_id, user_id FROM ` + "`" + `gantt_assigned` + "`" + `
WHERE user_id = ?
`

func (q *Queries) GetAssignedToUser(ctx context.Context, userID int32) ([]GanttAssigned, error) {
	rows, err := q.db.QueryContext(ctx, getAssignedToUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GanttAssigned
	for rows.Next() {
		var i GanttAssigned
		if err := rows.Scan(&i.ID, &i.ActivityID, &i.UserID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getProjectActivities = `-- name: GetProjectActivities :many
SELECT ac.id, ac.name, ac.description, ac.planned_start_date, ac.planned_end_date, ac.planned_budget, ac.actual_start_date, ac.actual_end_date, ac.actual_budget, ac.dependency_id, ac.state_id, ac.task_id FROM ` + "`" + `gantt_activity` + "`" + ` ac
JOIN ` + "`" + `gantt_task` + "`" + ` t ON ac.task_id = t.id
WHERE t.project_id = ?
`

func (q *Queries) GetProjectActivities(ctx context.Context, projectID int64) ([]GanttActivity, error) {
	rows, err := q.db.QueryContext(ctx, getProjectActivities, projectID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GanttActivity
	for rows.Next() {
		var i GanttActivity
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.PlannedStartDate,
			&i.PlannedEndDate,
			&i.PlannedBudget,
			&i.ActualStartDate,
			&i.ActualEndDate,
			&i.ActualBudget,
			&i.DependencyID,
			&i.StateID,
			&i.TaskID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getProjectAssignees = `-- name: GetProjectAssignees :many
SELECT a.id, a.activity_id, a.user_id FROM ` + "`" + `gantt_assigned` + "`" + ` a
JOIN ` + "`" + `gantt_activity` + "`" + ` ac ON a.activity_id = ac.id
JOIN ` + "`" + `gantt_task` + "`" + ` t ON ac.task_id = t.id
WHERE t.project_id = ?
`

func (q *Queries) GetProjectAssignees(ctx context.Context, projectID int64) ([]GanttAssigned, error) {
	rows, err := q.db.QueryContext(ctx, getProjectAssignees, projectID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GanttAssigned
	for rows.Next() {
		var i GanttAssigned
		if err := rows.Scan(&i.ID, &i.ActivityID, &i.UserID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getProjectEmployees = `-- name: GetProjectEmployees :many
SELECT u.id, u.password, u.last_login, u.is_superuser, u.username, u.first_name, u.last_name, u.email, u.is_staff, u.is_active, u.date_joined, u.avatar FROM ` + "`" + `user_user` + "`" + ` u
JOIN ` + "`" + `gantt_teammember` + "`" + ` tm ON tm.user_id = u.id
JOIN ` + "`" + `gantt_team` + "`" + ` t ON t.id = tm.team_id
WHERE t.project_id = ?
`

func (q *Queries) GetProjectEmployees(ctx context.Context, projectID int64) ([]UserUser, error) {
	rows, err := q.db.QueryContext(ctx, getProjectEmployees, projectID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []UserUser
	for rows.Next() {
		var i UserUser
		if err := rows.Scan(
			&i.ID,
			&i.Password,
			&i.LastLogin,
			&i.IsSuperuser,
			&i.Username,
			&i.FirstName,
			&i.LastName,
			&i.Email,
			&i.IsStaff,
			&i.IsActive,
			&i.DateJoined,
			&i.Avatar,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getStates = `-- name: GetStates :many
SELECT id, name, project_id FROM ` + "`" + `gantt_state` + "`" + `
WHERE project_id = ?
`

func (q *Queries) GetStates(ctx context.Context, projectID int64) ([]GanttState, error) {
	rows, err := q.db.QueryContext(ctx, getStates, projectID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GanttState
	for rows.Next() {
		var i GanttState
		if err := rows.Scan(&i.ID, &i.Name, &i.ProjectID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listProjects = `-- name: ListProjects :many
SELECT p.id, p.name, p.planned_start_date, p.planned_end_date, p.actual_start_date, p.actual_end_date, p.description, p.project_manager_id FROM ` + "`" + `gantt_project` + "`" + ` p
JOIN ` + "`" + `gantt_team` + "`" + ` t ON p.id = t.project_id
JOIN ` + "`" + `gantt_teammember` + "`" + ` tm ON t.id = tm.team_id
WHERE p.project_manager_id = ? OR tm.user_id = ?
`

type ListProjectsParams struct {
	ProjectManagerID int32
	UserID           int32
}

func (q *Queries) ListProjects(ctx context.Context, arg ListProjectsParams) ([]GanttProject, error) {
	rows, err := q.db.QueryContext(ctx, listProjects, arg.ProjectManagerID, arg.UserID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GanttProject
	for rows.Next() {
		var i GanttProject
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.PlannedStartDate,
			&i.PlannedEndDate,
			&i.ActualStartDate,
			&i.ActualEndDate,
			&i.Description,
			&i.ProjectManagerID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
